===
[Binding] destructuring bind
===
> let
  (Box a) = boxA
  a
> let (first, second) = tuple
---
(unison
    (watch_expression (exp_let
        (kw_let)
        (destructuring_bind
            (constructor_or_variable_pattern (regular_identifier) (constructor_or_variable_pattern (regular_identifier)))
            (kw_equals) (regular_identifier))
        (regular_identifier)))
    (watch_expression (exp_let
        (kw_let)
        (destructuring_bind (tuple_pattern
            (constructor_or_variable_pattern (regular_identifier))
            (constructor_or_variable_pattern (regular_identifier)))
        (kw_equals)
        (regular_identifier))))
)
===
[Binding] destructuring in a lambda
===
> List.map (cases (first, second) -> second) [(1, 2), (3, 4)]
---
(unison
    (watch_expression
        (function_application
            (path) (wordy_id)
            (tuple_or_parenthesized
                (cases)
                (pattern (tuple_pattern
                    (constructor_or_variable_pattern (regular_identifier))
                    (constructor_or_variable_pattern (regular_identifier)))
                    (arrow_symbol)
                    (regular_identifier)))
            (literal_list
                (tuple_or_parenthesized (nat) (nat))
                (tuple_or_parenthesized (nat) (nat))))))
