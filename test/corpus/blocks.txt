===
[Blocks] block starting with type signature'ified term declaration
===
> if
      s = 0
      s > 0
  then
    s: Int
    s = (0: Int)
    s + 1
  else
    s = 0
    s + 2
---
(unison (watch_expression (exp_if
  (kw_if)
  (term_declaration (term_definition (wordy_id) (kw_equals) (nat)))
  (function_application (wordy_id) (operator) (nat))
  (kw_then)
  (term_declaration
    (type_signature (wordy_id) (type_signature_colon) (term_type (wordy_id)))
    (term_definition (wordy_id) (kw_equals) (parenthetical_exp (nat) (type_signature_colon) (wordy_id)) ))
  (function_application (wordy_id) (operator) (nat))
  (kw_else)
  (term_declaration (term_definition (wordy_id) (kw_equals) (nat)))
  (function_application (wordy_id) (operator) (nat))
  )))
===
[Blocks] inline and multiline comments should not affect indentation calculation
===
> cases
       {- A comment -}
          -- A one-line comment
     0 -> "hi"
     1 -> "bye"
---
(unison
  (watch_expression
    (cases)
    (comment)
    (comment)
    (pattern (nat) (arrow_symbol) (literal_text))
    (pattern (nat) (arrow_symbol) (literal_text))))
===
[Block] rewrite block
===
reflection.Rewrites.examples.optionalToEither _e a =
  @rewrite
    term None ==> Left _e
    term Some a ==> Right a
    case Some a ==> Right a
    case Right a ==> Some a
    signature e a . Optional a ==> Either e a
---
(unison (term_declaration (term_definition
      (path)
      (wordy_id)
      (wordy_id)
      (wordy_id)
      (kw_equals)
      (rewrite_block
            (rewrite)
            (rewrite_term (term) (wordy_id) (superarrow) (function_application (wordy_id) (wordy_id)))
            (rewrite_term (term) (wordy_id) (wordy_id) (superarrow) (function_application (wordy_id) (wordy_id)))
            (rewrite_case (case) (wordy_id) (wordy_id) (superarrow) (function_application (wordy_id) (wordy_id)))
            (rewrite_case (case) (wordy_id) (wordy_id) (superarrow) (function_application (wordy_id) (wordy_id)))
            (rewrite_type (signature) (wordy_id) (wordy_id) (typesig_dot) (wordy_id) (wordy_id) (superarrow) (wordy_id) (wordy_id) (wordy_id))))))
===
[Block] rewrite
===
rule1 f = @rewrite term (x -> f x) ==> f
rule2 = @rewrite term (x -> f x) ==> f
rule1 x = @rewrite term x + 1 ==> Nat.increment x
rule2 x = @rewrite signature Optional ==> Optional2
---
(unison
  (term_declaration (term_definition (wordy_id) (wordy_id) (kw_equals) (rewrite_block (rewrite) 
    (rewrite_term (term) (tuple_or_parenthesized (literal_function (wordy_id) (arrow_symbol) (function_application (wordy_id) (wordy_id)))) (superarrow) (wordy_id)))))
  (term_declaration (term_definition (wordy_id) (kw_equals) (rewrite_block (rewrite) 
    (rewrite_term (term) (tuple_or_parenthesized (literal_function (wordy_id) (arrow_symbol) (function_application (wordy_id) (wordy_id)))) (superarrow) (wordy_id)))))
  (term_declaration (term_definition (wordy_id) (wordy_id) (kw_equals) (rewrite_block (rewrite) 
    (rewrite_term (term) (wordy_id) (operator) (nat) (superarrow) (function_application (path) (wordy_id) (wordy_id))))))
  (term_declaration (term_definition (wordy_id) (wordy_id) (kw_equals) (rewrite_block (rewrite)
    (rewrite_type (signature) (wordy_id) (superarrow) (wordy_id))))))